// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package person

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDb0593a3DecodeGithubComLxt1045BlogSampleProtobufPerson(in *jlexer.Lexer, out *Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DocId":
			out.DocId = uint32(in.Uint32())
		case "Position":
			out.Position = string(in.String())
		case "Company":
			out.Company = string(in.String())
		case "City":
			out.City = string(in.String())
		case "SchoolLevel":
			out.SchoolLevel = int32(in.Int32())
		case "Vip":
			out.Vip = bool(in.Bool())
		case "Chat":
			out.Chat = bool(in.Bool())
		case "Active":
			out.Active = int32(in.Int32())
		case "WorkAge":
			out.WorkAge = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComLxt1045BlogSampleProtobufPerson(out *jwriter.Writer, in Person) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DocId\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.DocId))
	}
	{
		const prefix string = ",\"Position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"Company\":"
		out.RawString(prefix)
		out.String(string(in.Company))
	}
	{
		const prefix string = ",\"City\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"SchoolLevel\":"
		out.RawString(prefix)
		out.Int32(int32(in.SchoolLevel))
	}
	{
		const prefix string = ",\"Vip\":"
		out.RawString(prefix)
		out.Bool(bool(in.Vip))
	}
	{
		const prefix string = ",\"Chat\":"
		out.RawString(prefix)
		out.Bool(bool(in.Chat))
	}
	{
		const prefix string = ",\"Active\":"
		out.RawString(prefix)
		out.Int32(int32(in.Active))
	}
	{
		const prefix string = ",\"WorkAge\":"
		out.RawString(prefix)
		out.Int32(int32(in.WorkAge))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Person) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComLxt1045BlogSampleProtobufPerson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Person) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComLxt1045BlogSampleProtobufPerson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Person) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComLxt1045BlogSampleProtobufPerson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Person) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComLxt1045BlogSampleProtobufPerson(l, v)
}
